<style>
  .file-drop-zone {
    border: 2px dashed #d1d5db;
    transition: all 0.3s ease;
  }
  
  .file-drop-zone.dragover {
    border-color: #3b82f6;
    background-color: #eff6ff;
    transform: scale(1.02);
  }
  
  .fade-in {
    animation: fadeIn 0.5s ease-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .pulse-animation {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
</style>

<div class="min-h-full">
    <!-- Main Content -->
    <main class="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="text-center mb-8 fade-in">
        <h1 class="text-3xl font-bold text-gray-900">Upload Your Resume</h1>
        <p class="mt-2 text-lg text-gray-600">
          Upload your resume and let our AI optimize it for any job posting
        </p>
        <div class="mt-4 flex justify-center">
          <div class="flex items-center space-x-6 text-sm text-gray-500">
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <span>PDF, DOCX, TXT</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <span>Up to 10MB</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <span>30s Processing</span>
            </div>
          </div>
        </div>
      </div>

      <%= form_with model: @resume, local: true, 
          html: { 
            multipart: true, 
            class: "space-y-8",
            data: { controller: "file-upload" }
          } do |f| %>
        
        <!-- Display errors -->
        <% if @resume.errors.any? %>
          <div class="bg-red-50 border border-red-200 rounded-lg p-4 fade-in">
            <div class="flex">
              <svg class="w-5 h-5 text-red-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
              </svg>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Please fix the following errors:</h3>
                <ul class="mt-2 text-sm text-red-700 list-disc list-inside">
                  <% @resume.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
                </ul>
              </div>
            </div>
          </div>
        <% end %>

        <!-- File Upload Section -->
        <div class="bg-white rounded-xl shadow-lg p-8 fade-in" style="animation-delay: 0.1s;">
          <div class="file-drop-zone rounded-lg p-8 text-center cursor-pointer" 
               data-file-upload-target="dropzone"
               data-action="dragover->file-upload#handleDragOver dragenter->file-upload#handleDragEnter dragleave->file-upload#handleDragLeave drop->file-upload#handleDrop click->file-upload#openFileDialog">
            
            <svg class="mx-auto h-16 w-16 text-gray-400 pulse-animation" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
            </svg>
            
            <div class="mt-4">
              <span class="text-lg font-medium text-gray-900">Drop your resume here</span>
              <p class="text-gray-500 mt-1">or 
                <span class="font-medium text-blue-600 hover:text-blue-500">click to browse</span>
              </p>
              
              <%= f.file_field :file, 
                  id: "resume_file",
                  accept: ".pdf,.docx,.doc,.txt",
                  class: "hidden",
                  data: { 
                    file_upload_target: "fileInput",
                    action: "change->file-upload#handleFileSelect"
                  } %>
            </div>
            
            <!-- Fallback Simple File Upload (visible if JS fails) -->
            <div class="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Or use simple file upload:
              </label>
              <%= f.file_field :file, 
                  accept: ".pdf,.docx,.doc,.txt",
                  class: "block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100",
                  id: "simple_file_upload" %>
              <p class="mt-1 text-xs text-gray-500">Select PDF, DOCX, DOC, or TXT file (max 10MB)</p>
            </div>
            
            <p class="text-xs text-gray-400 mt-4">
              Supports PDF, DOCX, DOC, and TXT files up to 10MB
            </p>
            
            <!-- File Preview -->
            <div class="hidden mt-6 p-4 bg-blue-50 rounded-lg" data-file-upload-target="filePreview">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                  </svg>
                  <div>
                    <p class="text-sm font-medium text-gray-900" data-file-upload-target="fileName"></p>
                    <p class="text-xs text-gray-500" data-file-upload-target="fileSize"></p>
                  </div>
                </div>
                <button type="button" 
                        class="text-gray-400 hover:text-gray-600"
                        data-action="click->file-upload#removeFile">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Resume Details Form -->
        <div class="bg-white rounded-xl shadow-lg p-8 fade-in" style="animation-delay: 0.2s;">
          <h3 class="text-lg font-semibold text-gray-900 mb-6">Resume Details</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Target Role -->
            <div>
              <%= f.label :target_role, "Target Job Title", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.text_field :target_role, 
                  class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all",
                  placeholder: "e.g., Software Engineer, Product Manager" %>
              <p class="mt-1 text-xs text-gray-500">The job title you're targeting (we'll auto-detect if not provided)</p>
            </div>

            <!-- Industry -->
            <div>
              <%= f.label :industry, "Industry", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.select :industry,
                  options_for_select([
                    ['Technology', 'technology'],
                    ['Healthcare', 'healthcare'],
                    ['Finance', 'finance'],
                    ['Education', 'education'],
                    ['Manufacturing', 'manufacturing'],
                    ['Retail', 'retail'],
                    ['Consulting', 'consulting'],
                    ['Government', 'government'],
                    ['Non-profit', 'nonprofit'],
                    ['Other', 'other']
                  ]),
                  { prompt: "Select industry (optional)" },
                  { class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" } %>
            </div>

            <!-- Experience Level -->
            <div>
              <%= f.label :experience_level, "Experience Level", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.select :experience_level,
                  options_for_select([
                    ['Entry Level (0-2 years)', 'entry'],
                    ['Mid Level (3-5 years)', 'mid'],
                    ['Senior Level (6-10 years)', 'senior'],
                    ['Executive Level (10+ years)', 'executive']
                  ]),
                  { prompt: "Select experience level (optional)" },
                  { class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" } %>
            </div>

            <!-- AI Provider -->
            <div>
              <%= f.label :provider, "AI Provider", class: "block text-sm font-medium text-gray-700 mb-2" %>
              <%= f.select :provider,
                  options_for_select([
                    ['OpenAI GPT-4 (Recommended)', 'openai'],
                    ['Anthropic Claude', 'anthropic'],
                    ['Google Gemini', 'google']
                  ], 'openai'),
                  {},
                  { class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" } %>
              <p class="mt-1 text-xs text-gray-500">Choose your preferred AI model for optimization</p>
            </div>
          </div>
        </div>

        <!-- Job Description Section -->
        <div class="bg-white rounded-xl shadow-lg p-8 fade-in" style="animation-delay: 0.3s;">
          <h3 class="text-lg font-semibold text-gray-900 mb-6">Target Job Description</h3>
          <p class="text-sm text-gray-600 mb-6">
            Add a job description to optimize your resume for specific roles. Our AI will analyze requirements and tailor your resume accordingly.
          </p>
          
          <!-- Job URL Input -->
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Option 1: Job Posting URL</label>
            <div class="flex space-x-3">
              <div class="flex-1">
                <input type="url" 
                       id="job-url-input"
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                       placeholder="https://jobs.company.com/software-engineer"
                       data-controller="job-url-fetcher"
                       data-job-url-fetcher-target="urlInput">
                <p class="mt-1 text-xs text-gray-500">Paste a job posting URL from LinkedIn, Indeed, company websites, etc.</p>
              </div>
              <button type="button" 
                      id="fetch-job-btn"
                      class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                      data-action="click->job-url-fetcher#fetchJob"
                      data-job-url-fetcher-target="fetchButton">
                <div class="hidden" data-job-url-fetcher-target="spinner">
                  <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </div>
                <span data-job-url-fetcher-target="buttonText">Fetch</span>
              </button>
            </div>
            
            <!-- URL Fetch Results -->
            <div class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg" data-job-url-fetcher-target="successMessage">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
                <div>
                  <p class="text-sm font-medium text-green-800">Job posting fetched successfully!</p>
                  <p class="text-xs text-green-600" data-job-url-fetcher-target="fetchedInfo"></p>
                </div>
              </div>
            </div>
            
            <div class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg" data-job-url-fetcher-target="errorMessage">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
                <div>
                  <p class="text-sm font-medium text-red-800">Failed to fetch job posting</p>
                  <p class="text-xs text-red-600" data-job-url-fetcher-target="errorText"></p>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Divider -->
          <div class="relative mb-6">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-white text-gray-500">OR</span>
            </div>
          </div>
          
          <!-- Manual Job Description Input -->
          <div>
            <label for="resume_job_description" class="block text-sm font-medium text-gray-700 mb-2">Option 2: Paste Job Description</label>
            <%= f.text_area :job_description,
                rows: 12,
                class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all",
                placeholder: "Paste the full job description here...\n\nExample:\nSenior Software Engineer at TechCorp\n\nWe are looking for an experienced Senior Software Engineer to join our growing team...\n\nResponsibilities:\n• Design and develop scalable web applications\n• Collaborate with product and design teams\n• Mentor junior developers\n• Write clean, maintainable code\n\nRequirements:\n• 5+ years of software development experience\n• Proficiency in JavaScript, React, and Node.js\n• Experience with cloud platforms (AWS/Azure/GCP)\n• Strong problem-solving skills\n• Bachelor's degree in Computer Science or related field\n\nPreferred Qualifications:\n• Experience with microservices architecture\n• Knowledge of DevOps practices\n• Previous startup experience\n\nBenefits:\n• Competitive salary and equity\n• Health, dental, and vision insurance\n• Flexible work arrangements\n• $2,000 annual learning stipend",
                data: { 
                  job_url_fetcher_target: "jobDescription"
                } %>
            
            <div class="mt-4 flex items-start space-x-4 text-sm text-gray-600">
              <div class="flex items-center space-x-2">
                <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <span class="font-medium">Tips for better optimization:</span>
              </div>
            </div>
            <ul class="mt-2 text-xs text-gray-500 space-y-1 ml-7">
              <li>• Include the complete job posting with requirements and responsibilities</li>
              <li>• Add company information and job title for context</li>
              <li>• Include desired skills, experience level, and qualifications</li>
              <li>• The more detailed the description, the better the AI optimization</li>
            </ul>
          </div>
        </div>

        <!-- Manual Text Input (Alternative) -->
        <div class="bg-white rounded-xl shadow-lg p-8 fade-in" style="animation-delay: 0.4s;">
          <h3 class="text-lg font-semibold text-gray-900 mb-6">
            Or Paste Resume Text
            <span class="text-sm font-normal text-gray-500">(if you don't have a file to upload)</span>
          </h3>
          
          <%= f.text_area :original_content,
              rows: 12,
              class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all",
              placeholder: "Paste your resume text here...\n\nExample:\nJohn Doe\nSoftware Engineer\nemail@example.com | (555) 123-4567\n\nPROFESSIONAL SUMMARY\nExperienced software engineer with 5+ years developing web applications...\n\nEXPERIENCE\nSenior Software Engineer | TechCorp | 2020-Present\n• Developed React applications serving 1M+ users\n• Led team of 3 engineers on major product launches\n• Reduced page load times by 40% through optimization" %>
          <p class="mt-2 text-xs text-gray-500">
            You can either upload a file above OR paste text here. File upload takes priority if both are provided.
          </p>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-center fade-in" style="animation-delay: 0.5s;">
          <%= f.submit "Upload & Process Resume", 
              class: "px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg shadow-lg hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform hover:scale-105 transition-all duration-200",
              data: { disable_with: "Processing..." } %>
        </div>

        <!-- Help Text -->
        <div class="text-center text-sm text-gray-500 fade-in" style="animation-delay: 0.6s;">
          <p>Your resume will be processed securely and optimized using advanced AI technology.</p>
          <p class="mt-1">Processing typically takes 30-60 seconds.</p>
        </div>
      <% end %>
    </main>
</div>

<!-- File Upload JavaScript -->
<script>
    class FileUploadController extends Stimulus.Controller {
      static targets = ["dropzone", "fileInput", "filePreview", "fileName", "fileSize"];
      
      connect() {
        console.log("FileUpload controller connected");
      }
      
      handleDragOver(event) {
        event.preventDefault();
        console.log("Drag over");
      }
      
      handleDragEnter(event) {
        event.preventDefault();
        this.dropzoneTarget.classList.add('dragover');
        console.log("Drag enter");
      }
      
      handleDragLeave(event) {
        event.preventDefault();
        if (!this.dropzoneTarget.contains(event.relatedTarget)) {
          this.dropzoneTarget.classList.remove('dragover');
        }
        console.log("Drag leave");
      }
      
      handleDrop(event) {
        event.preventDefault();
        this.dropzoneTarget.classList.remove('dragover');
        console.log("File dropped");
        
        const files = event.dataTransfer.files;
        console.log("Files:", files);
        if (files.length > 0) {
          // Create a new FileList object and assign it
          const dt = new DataTransfer();
          dt.items.add(files[0]);
          this.fileInputTarget.files = dt.files;
          this.showFilePreview(files[0]);
        }
      }
      
      openFileDialog(event) {
        event.preventDefault();
        console.log("Opening file dialog");
        this.fileInputTarget.click();
      }
      
      handleFileSelect(event) {
        console.log("File selected via input");
        const file = event.target.files[0];
        if (file) {
          console.log("File:", file);
          this.showFilePreview(file);
        }
      }
      
      showFilePreview(file) {
        console.log("Showing preview for:", file.name);
        this.fileNameTarget.textContent = file.name;
        this.fileSizeTarget.textContent = this.formatFileSize(file.size);
        this.filePreviewTarget.classList.remove('hidden');
      }
      
      removeFile() {
        this.fileInputTarget.value = '';
        this.filePreviewTarget.classList.add('hidden');
      }
      
      formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
    }
    
    // Job URL Fetcher Controller
    class JobUrlFetcherController extends Stimulus.Controller {
      static targets = ["urlInput", "fetchButton", "buttonText", "spinner", "jobDescription", 
                       "successMessage", "errorMessage", "fetchedInfo", "errorText"];
      
      async fetchJob() {
        const url = this.urlInputTarget.value.trim();
        
        if (!url) {
          this.showError("Please enter a valid job posting URL");
          return;
        }
        
        if (!this.isValidUrl(url)) {
          this.showError("Please enter a valid URL (must start with http:// or https://)");
          return;
        }
        
        this.setLoading(true);
        this.hideMessages();
        
        try {
          const response = await fetch('/api/fetch-job-posting', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
            },
            body: JSON.stringify({ url: url })
          });
          
          const data = await response.json();
          
          if (response.ok && data.success) {
            this.handleSuccess(data);
          } else {
            this.showError(data.error || 'Failed to fetch job posting');
          }
        } catch (error) {
          console.error('Error fetching job:', error);
          this.showError('Network error. Please check your connection and try again.');
        } finally {
          this.setLoading(false);
        }
      }
      
      handleSuccess(data) {
        // Fill in the job description
        this.jobDescriptionTarget.value = data.job_description;
        
        // Show success message with parsed info
        let infoText = '';
        if (data.company_name) infoText += `Company: ${data.company_name} `;
        if (data.job_title) infoText += `• Role: ${data.job_title} `;
        if (data.location) infoText += `• Location: ${data.location}`;
        
        this.fetchedInfoTarget.textContent = infoText || 'Job posting content extracted successfully';
        this.successMessageTarget.classList.remove('hidden');
        
        // Auto-fill other fields if available
        if (data.job_title) {
          const targetRoleInput = document.querySelector('#resume_target_role');
          if (targetRoleInput && !targetRoleInput.value) {
            targetRoleInput.value = data.job_title;
          }
        }
        
        // Scroll to job description to show it was filled
        this.jobDescriptionTarget.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      
      showError(message) {
        this.errorTextTarget.textContent = message;
        this.errorMessageTarget.classList.remove('hidden');
      }
      
      hideMessages() {
        this.successMessageTarget.classList.add('hidden');
        this.errorMessageTarget.classList.add('hidden');
      }
      
      setLoading(loading) {
        if (loading) {
          this.buttonTextTarget.textContent = 'Fetching...';
          this.spinnerTarget.classList.remove('hidden');
          this.fetchButtonTarget.disabled = true;
        } else {
          this.buttonTextTarget.textContent = 'Fetch';
          this.spinnerTarget.classList.add('hidden');
          this.fetchButtonTarget.disabled = false;
        }
      }
      
      isValidUrl(string) {
        try {
          new URL(string);
          return string.startsWith('http://') || string.startsWith('https://');
        } catch (_) {
          return false;  
        }
      }
    }
    
    // Register the controllers
    if (window.Stimulus) {
      window.Stimulus.register("file-upload", FileUploadController);
      window.Stimulus.register("job-url-fetcher", JobUrlFetcherController);
    }
</script>
